{"version":3,"file":"static/js/955.49c5fef1.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Profile/Profile.module.css?f51d","webpack://samurai-way/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?23b5","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatusContainer.tsx","webpack://samurai-way/./src/Components/Profile/ProfileInfo/ProfileData/Contact/Contact.module.css?05a6","Components/Profile/ProfileInfo/ProfileData/Contact/Contact.tsx","Components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","Components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/Components/Profile/MyPost/MyPost.module.css?9e2c","webpack://samurai-way/./src/Components/Profile/MyPost/Post/Post.module.css?ba55","Components/Profile/MyPost/Post/Post.tsx","Components/Profile/MyPost/AddPostForm/AddPostForm.tsx","Components/Profile/MyPost/AddPostForm/AddPostReduxForm.tsx","Components/Profile/MyPost/MyPosts.tsx","Components/Profile/MyPost/MyPostContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","webpack://samurai-way/./src/Components/common/FormsControl/FormsControl.module.css?c49d","Components/common/FormsControl/FormsControl.tsx","Components/hoc/WithAuthRedirect.tsx","utilits/validation/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"Profile_descriptionBlock__+fSCO\"};","// extracted by mini-css-extract-plugin\nexport default {\"imgProfileInfo\":\"ProfileInfo_imgProfileInfo__GfE-V\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    newStatusText: string\r\n    updateStatus?: (newStatusText: string) => void\r\n}\r\n\r\nconst ProfileStatus = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [statusText, setStatusText] = useState<string>(props.newStatusText)\r\n\r\n    useEffect(() => {\r\n        setStatusText(props.newStatusText)\r\n    }, [props.newStatusText])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus && props.updateStatus(statusText)\r\n        setStatusText(\"\")\r\n    }\r\n    const editStatusTextHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusText(event.currentTarget.value)\r\n    }\r\n    return (\r\n        <div><b>Status: </b>\r\n            {!editMode\r\n                ?\r\n                <span onDoubleClick={activateEditMode}>\r\n                        {props.newStatusText || \"No status\"}\r\n                </span>\r\n                :\r\n                <span>\r\n                    <input type=\"text\"\r\n                           value={statusText}\r\n                           onBlur={deactivateEditMode}\r\n                           onChange={editStatusTextHandler}\r\n                           autoFocus/>\r\n                </span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {updateStatus} from \"../../../../Redux/reducers/profile-reducer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport {RootStateType} from \"../../../../Redux/redux-store\";\r\n\r\ntype MapStateToPropsForMyProfileStatusContainerType = {\r\n    newStatusText: string\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsForMyProfileStatusContainerType => {\r\n    return {\r\n        newStatusText: state.profilePage.newStatusText\r\n    }\r\n}\r\n\r\nconst ProfileStatusContainer = connect(mapStateToProps, {updateStatus})(ProfileStatus)\r\n\r\nexport default ProfileStatusContainer;","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__A8014\"};","import React from 'react';\r\nimport s from \"./Contact.module.css\"\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}:ContactType) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}:</b> {contactValue}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Contact;","import React from 'react';\r\nimport Contact from \"./Contact/Contact\";\r\nimport {ProfileType} from \"../../../../Redux/reducers/profile-reducer\";\r\nimport {ContactsType} from \"../../../../api/api\";\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    setEditMode: () => void\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, setEditMode}: ProfileDataType) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div><button onClick={setEditMode}>EDIT</button></div>}\r\n            <div>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n            </div>\r\n            <div>\r\n                {profile.lookingForAJob &&\r\n                    <span><b>My professional skills:</b>{profile.lookingForAJobDescription}</span>}\r\n            </div>\r\n            <div>\r\n                {profile.aboutMe &&\r\n                    <span><b>My personal information:</b>{profile.aboutMe}</span>}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>{Object.keys(profile.contacts).map((key)=> {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileData;","import React from 'react';\r\nimport {ProfileType, saveProfileTC} from \"../../../../Redux/reducers/profile-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {FormikErrors, useFormik} from \"formik\";\r\nimport {RootStateType} from \"../../../../Redux/redux-store\";\r\nimport {ContactsType, ProfileParamsType} from \"../../../../api/api\";\r\n\r\ntype ProfileDataForm = {\r\n    setEditMode: () => void\r\n}\r\n// type ProfileDataFormErrorType = {\r\n//     fullName?: string\r\n//     lookingForAJobDescription?: string\r\n//     aboutMe?: string\r\n//     contacts: {\r\n//         github: string\r\n//         vk: string\r\n//         facebook: string\r\n//         instagram: string\r\n//         twitter: string\r\n//         website: string\r\n//         youtube: string\r\n//         mainLink: string\r\n//     }\r\n// }\r\n\r\nconst ProfileDataForm = ({setEditMode}: ProfileDataForm) => {\r\n    const dispatch = useDispatch()\r\n    const profile = useSelector<RootStateType, ProfileType>(state => state.profilePage.profile)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            userId: profile.userId,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            fullName: profile.fullName,\r\n            aboutMe: profile.aboutMe,\r\n            contacts: {\r\n                github: profile.contacts.github,\r\n                vk: profile.contacts.vk,\r\n                facebook: profile.contacts.facebook,\r\n                instagram: profile.contacts.instagram,\r\n                twitter: profile.contacts.twitter,\r\n                website: profile.contacts.website,\r\n                youtube: profile.contacts.youtube,\r\n                mainLink: profile.contacts.mainLink\r\n            }\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(saveProfileTC(values))\r\n            setEditMode()\r\n\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrors<ProfileParamsType & ContactsType> = {};\r\n            if (!values.fullName) {\r\n                errors.fullName = 'Required';\r\n            } else if (values.fullName.length > 20) {\r\n                errors.fullName = 'Must be 20 characters or less';\r\n            }\r\n            if (!values.lookingForAJobDescription) {\r\n                errors.lookingForAJobDescription = 'Required';\r\n            } else if (values.lookingForAJobDescription.length > 1000) {\r\n                errors.lookingForAJobDescription = 'Must be 1000 characters or less';\r\n            }\r\n            if (!values.aboutMe) {\r\n                errors.aboutMe = 'Required';\r\n            } else if (values.aboutMe.length > 1000) {\r\n                errors.aboutMe = 'Must be 1000 characters or less';\r\n            }\r\n            // if (!/http(?:s)?:\\/\\/(?:www\\.)?twitter\\.com\\/([a-zA-Z0-9_]+)/.test(values.contacts.twitter)) {\r\n            //     errors.twitter = 'Invalid Twitter name';\r\n            // }\r\n            // if (!/^(((https?)\\:\\/\\/)?(www\\.)?)?(vk\\.com\\/[A-Za-z0-9-]\\/?)$/.test(values.contacts.vk)) {\r\n            //     errors.vk = 'Invalid VK name';\r\n            // }\r\n            // if (!/^(http(s?):\\/\\/)?(www\\.)?github\\.([a-z])+\\/([A-Za-z0-9]{1,})+\\/?$/.test(values.contacts.github)) {\r\n            //     errors.github = 'Invalid Github name';\r\n            // }\r\n            // if (!/^(http\\:\\/\\/)?(youtube\\.com|youtu\\.be)+$/.test(values.contacts.youtube)) {\r\n            //     errors.youtube = 'Invalid Youtube name';\r\n            // }\r\n            // if (/(?:https?:\\/\\/)?(?:www\\.)?(?:facebook|fb|m\\.facebook)\\.(?:com|me)\\/(?:(?:\\w)*#!\\/)?(?:pages\\/)?(?:[\\w\\-]*\\/)*([\\w\\-\\.]+)(?:\\/)?/.test(values.contacts.facebook)) {\r\n            //     errors.facebook = 'Invalid Facebook name';\r\n            // }\r\n            // if (!/(?:(?:http|https):\\/\\/)?(?:www.)?(?:instagram.com|instagr.am|instagr.com)\\/(\\w+)/.test(values.contacts.instagram)) {\r\n            //     errors.instagram = 'Invalid Instagram name';\r\n            // }\r\n            // if (!/http(s)?:\\/\\/([\\w]+\\.)?linkedin\\.com\\/in\\/[A-z0-9_-]+\\/?/.test(values.contacts.mainLink)) {\r\n            //     errors.mainLink = 'Invalid Linkedin mainLink';\r\n            // }\r\n            // if (!/^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/.test(values.contacts.website)) {\r\n            //     errors.website = 'Invalid Website name';\r\n            // }\r\n            return errors;\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <button type=\"submit\">SAVE</button>\r\n            </div>\r\n            <div>\r\n                <b>Full name:</b>\r\n                <div>\r\n                    <input type=\"text\"\r\n                           name=\"fullName\"\r\n                           placeholder=\"Enter fullName\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.fullName}\r\n                    />\r\n                </div>\r\n                {formik.touched.fullName && formik.errors.fullName &&\r\n                    <div style={{color: \"red\"}}>{formik.errors.fullName}</div>}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job:</b>\r\n                <div>\r\n                    <input type=\"checkbox\"\r\n                           name=\"lookingForAJob\"\r\n                           onChange={formik.handleChange}\r\n                           checked={formik.values.lookingForAJob}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                <div>\r\n                    <textarea name=\"lookingForAJobDescription\"\r\n                              placeholder=\"Enter professional skills\"\r\n                              onChange={formik.handleChange}\r\n                              value={formik.values.lookingForAJobDescription}\r\n                    />\r\n                </div>\r\n                {formik.touched.lookingForAJobDescription && formik.errors.lookingForAJobDescription &&\r\n                    <div style={{color: \"red\"}}>{formik.errors.lookingForAJobDescription}</div>}\r\n            </div>\r\n            <div>\r\n                <b>My personal information:</b>\r\n                <div>\r\n                    <textarea name=\"aboutMe\"\r\n                              placeholder=\"Enter personal information\"\r\n                              onChange={formik.handleChange}\r\n                              value={formik.values.aboutMe}\r\n                    />\r\n                </div>\r\n                {formik.touched.aboutMe && formik.errors.aboutMe &&\r\n                    <div style={{color: \"red\"}}>{formik.errors.aboutMe}</div>}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>{Object.keys(profile.contacts).map((key) => {\r\n                // @ts-ignore\r\n                // @ts-ignore\r\n                return (\r\n                    <div key={key}>\r\n                        <b>{key}:</b>\r\n                        <div>\r\n                            <input type=\"text\"\r\n                                   name={\"contacts.\" + key}\r\n                                   placeholder={key}\r\n                                   onChange={formik.handleChange}\r\n                                   value={formik.values.contacts[key as keyof ContactsType]}\r\n                            />\r\n                            {/*{formik.touched.contacts?[key] && formik.errors?[key]*/}\r\n                            {/*    ? <div style={{color: \"red\"}}>{formik.errors?[key]}</div>*/}\r\n                            {/*    : null}*/}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ProfileDataForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../Redux/reducers/profile-reducer\";\r\nimport ProfileStatusContainer from \"./ProfileStatus/ProfileStatusContainer\";\r\nimport unknownUser from \"../../../assets/images/user.png\"\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\nimport ProfileDataForm from \"./ProfileDataForm/ProfileDataForm\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, isOwner, savePhoto}: ProfileInfoType) => {\r\n    const [isEdit, setIsEdit] = useState(false)\r\n    const onChangeEditMode = () => {\r\n        setIsEdit(!isEdit)\r\n    }\r\n    const onChangeProfilePhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div> {!profile\r\n            ? <Preloader/>\r\n            : <div className={classes.descriptionBlock}>\r\n                <div className={classes.imgProfileInfo}><img src={profile.photos.large || unknownUser}/></div>\r\n                {isOwner && <input type=\"file\" onChange={onChangeProfilePhoto}/>}\r\n                <div>\r\n                    {isEdit ? <ProfileDataForm setEditMode={onChangeEditMode}/>: <ProfileData profile={profile} setEditMode={onChangeEditMode} isOwner={isOwner}/>}\r\n                    <ProfileStatusContainer/>\r\n                </div>\r\n\r\n            </div>\r\n        }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPost_postBlock__ZZVtG\",\"posts\":\"MyPost_posts__WajAW\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Ihm4C\"};","import React from 'react';\r\nimport classes from \".//Post.module.css\";\r\nimport {PostsDataType} from \"../../../../Redux/reducers/profile-reducer\";\r\n\r\nconst Post = React.memo((props:PostsDataType) => {\r\n    return (\r\n     <span>\r\n         <div className={classes.item}>\r\n             <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRbNslP7-_P7jz5MrT5yhW14y_IzBDbZZT0ag&usqp=CAU\" alt=\"no photo\"/>\r\n             {props.message}\r\n             <div><span>Like {props.likeCount}</span></div>\r\n         </div>\r\n\r\n     </span>\r\n    );\r\n});\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utilits/validation/validators\";\r\nimport FormsControl from \"../../../common/FormsControl/FormsControl\";\r\nexport type AddPostFormType = {\r\n    textarea: string\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst Textarea = FormsControl(\"textarea\")\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder=\"Enter your post\" name=\"newPostBody\" component={Textarea} validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n);\r\n};\r\n\r\nexport default AddPostForm;","import {reduxForm} from \"redux-form\";\r\nimport AddPostForm, {AddPostFormType} from \"./AddPostForm\";\r\n\r\nexport const AddPostReduxForm = reduxForm<AddPostFormType>({form:\"profileAddPostForm\"})(AddPostForm)","import React from 'react';\r\nimport classes from \".//MyPost.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostContainerPropsType} from \"./MyPostContainer\";\r\nimport {AddPostReduxForm} from \"./AddPostForm/AddPostReduxForm\";\r\n\r\nconst MyPosts = React.memo((props: MyPostContainerPropsType) => {\r\n    let postsElement = props.statePost.map((p) =>\r\n        <div key={p.id}>\r\n            <Post message={p.message}\r\n                  likeCount={p.likeCount}/>\r\n        </div>)\r\n\r\n    let addNewPostHandler = (values: any) => {\r\n        props.addPost(values.newPostBody)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <div>\r\n                <h2>My posts</h2>\r\n            </div>\r\n            <AddPostReduxForm onSubmit={addNewPostHandler}/>\r\n            <div className={classes.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport {addPost, PostsDataType} from \"../../../Redux/reducers/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../Redux/redux-store\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\ntype MapStateToPropsForMyPostContainerType = {\r\n    statePost: Array<PostsDataType>\r\n}\r\n\r\ntype MapDispatchToPropsForMyPostContainerType = {\r\n    addPost: (newPost: string) => void,\r\n}\r\n\r\nexport type MyPostContainerPropsType = MapStateToPropsForMyPostContainerType & MapDispatchToPropsForMyPostContainerType\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsForMyPostContainerType => {\r\n    return {\r\n        statePost: state.profilePage.postsData\r\n    }\r\n}\r\n\r\nconst MyPostContainer = connect(mapStateToProps, {addPost})(MyPosts)\r\n\r\nexport default MyPostContainer;","import React from 'react';\r\nimport classes from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostContainer from \"./MyPost/MyPostContainer\";\r\nimport {ProfileType} from \"../../Redux/reducers/profile-reducer\";\r\n\r\ntype ProfileLocalType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nconst Profile = ({profile, isOwner, savePhoto}: ProfileLocalType) => {\r\n    return (\r\n        <div className={classes.profile}>\r\n            <ProfileInfo profile={profile} isOwner={isOwner} savePhoto={savePhoto}/>\r\n            <MyPostContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React, {ComponentType} from \"react\"\r\nimport Profile from \"./Profile\";\r\nimport {getProfile, getStatus, ProfilePageType, ProfileType, savePhoto} from \"../../Redux/reducers/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {RootStateType} from \"../../Redux/redux-store\";\r\n\r\ntype MapStateToPropsForProfileContainerType = {\r\n    profile: ProfileType\r\n    authUserID: number | null\r\n}\r\ntype MapDispatchToPropsForProfileContainer = {\r\n    getProfile: (userID: string) => void\r\n    getStatus: (userID: string) => void\r\n    savePhoto: (file: File) => void\r\n}\r\ntype ProfileContainerType = MapStateToPropsForProfileContainerType & MapDispatchToPropsForProfileContainer\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nexport type CommonProfileContainerPropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\r\n\r\nclass ProfileContainer extends React.Component<CommonProfileContainerPropsType> {\r\n\r\n    constructor(props: CommonProfileContainerPropsType) {\r\n        super(props);\r\n    }\r\n    refreshProfile(){\r\n        let userID = this.props.match.params.userId\r\n        if (!userID) {\r\n            userID = String(this.props.authUserID)\r\n        }\r\n        this.props.getProfile(userID)\r\n        this.props.getStatus(userID)\r\n    }\r\n\r\n    componentDidMount() {\r\n       this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: CommonProfileContainerPropsType, prevState: ProfilePageType) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId){\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return <Profile profile={this.props.profile} isOwner={this.props.match.params.userId === String(this.props.authUserID)} savePhoto={this.props.savePhoto}/>;\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsForProfileContainerType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        authUserID: state.auth.userID\r\n    }\r\n}\r\nexport default compose<ComponentType>(connect(mapStateToProps, {\r\n    getProfile,\r\n    getStatus,\r\n    savePhoto,\r\n}), withRouter, WithAuthRedirect)(ProfileContainer)","// extracted by mini-css-extract-plugin\nexport default {\"textarea\":\"FormsControl_textarea__uFRWD\",\"error\":\"FormsControl_error__RmnLp\",\"textError\":\"FormsControl_textError__kzYtc\"};","import React from 'react';\r\nimport style from './FormsControl.module.css'\r\n\r\nconst FormsControl = (Element: string) => ({input, meta: {touched, error}, ...props}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div>\r\n            <div className={style.textarea + \" \" + (hasError ? style.error : \"\")}>\r\n                <Element {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span className={style.textError}>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormsControl;","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../Redux/redux-store\";\r\n\r\ntype MapStateToPropsForDirect = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForDirect = (state: RootStateType): MapStateToPropsForDirect => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>){\r\n    const RedirectComponent = (props: MapStateToPropsForDirect) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/Login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToPropsForDirect)(RedirectComponent)\r\n}\r\n\r\n","\r\nexport const required = (value: string) => {\r\n    if(value) return undefined\r\n    else return \"Field is required\"\r\n}\r\nexport const maxLengthCreator = (maxLength:number) => (value:string) => {\r\n        if(value.length > maxLength) return `Max length more than ${maxLength} symbols`\r\n        else return undefined\r\n}"],"names":["props","useState","editMode","setEditMode","newStatusText","statusText","setStatusText","useEffect","type","value","onBlur","updateStatus","onChange","event","currentTarget","autoFocus","onDoubleClick","connect","state","profilePage","ProfileStatus","contactTitle","contactValue","className","s","profile","isOwner","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","dispatch","useDispatch","useSelector","formik","useFormik","initialValues","userId","github","vk","facebook","instagram","twitter","website","youtube","mainLink","onSubmit","values","saveProfileTC","validate","errors","length","handleSubmit","name","placeholder","handleChange","touched","style","color","checked","savePhoto","isEdit","setIsEdit","onChangeEditMode","classes","src","photos","large","unknownUser","e","target","files","Preloader","React","alt","message","likeCount","maxLength10","maxLengthCreator","Textarea","FormsControl","Field","component","required","AddPostReduxForm","reduxForm","form","AddPostForm","postsElement","statePost","p","id","addPost","newPostBody","postsData","MyPosts","ProfileContainer","userID","this","match","params","String","authUserID","getProfile","getStatus","refreshProfile","prevProps","prevState","compose","auth","withRouter","WithAuthRedirect","Element","input","meta","error","hasError","mapStateToPropsForDirect","isAuth","Component","restProps","to","maxLength"],"sourceRoot":""}