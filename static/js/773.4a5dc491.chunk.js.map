{"version":3,"file":"static/js/773.4a5dc491.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Profile/Profile.module.css?f51d","webpack://samurai-way/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?23b5","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatusContainer.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/Components/Profile/MyPost/MyPost.module.css?9e2c","webpack://samurai-way/./src/Components/Profile/MyPost/Post/Post.module.css?ba55","Components/Profile/MyPost/Post/Post.tsx","Components/Profile/MyPost/AddPostForm/AddPostForm.tsx","Components/Profile/MyPost/AddPostForm/AddPostReduxForm.tsx","Components/Profile/MyPost/MyPosts.tsx","Components/Profile/MyPost/MyPostContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","webpack://samurai-way/./src/Components/common/FormsControl/FormsControl.module.css?c49d","Components/common/FormsControl/FormsControl.tsx","Components/hoc/WithAuthRedirect.tsx","utilits/validation/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"Profile_descriptionBlock__+fSCO\"};","// extracted by mini-css-extract-plugin\nexport default {\"imgProfileInfo\":\"ProfileInfo_imgProfileInfo__GfE-V\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    newStatusText: string\r\n    updateStatus?:(newStatusText: string) => void\r\n}\r\n\r\nconst ProfileStatus = (props: ProfileStatusPropsType) => {\r\n    const[editMode, setEditMode] = useState<boolean>(false)\r\n    const[statusText, setStatusText] = useState<string>(props.newStatusText)\r\n\r\n    useEffect(() => {setStatusText(props.newStatusText)}, [props.newStatusText])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus && props.updateStatus(statusText)\r\n        setStatusText(\"\")\r\n    }\r\n    const editStatusTextHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n       setStatusText(event.currentTarget.value)\r\n    }\r\n    return (\r\n            <div>\r\n                {!editMode\r\n                ?\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>\r\n                        {props.newStatusText || \"No status\"}\r\n                    </span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input type=\"text\"\r\n                           value={statusText}\r\n                           onBlur={deactivateEditMode}\r\n                           onChange={editStatusTextHandler}\r\n                           autoFocus/>\r\n                </div>}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {updateStatus} from \"../../../../Redux/reducers/profile-reducer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport {RootStateType} from \"../../../../Redux/redux-store\";\r\n\r\ntype MapStateToPropsForMyProfileStatusContainerType = {\r\n    newStatusText: string\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsForMyProfileStatusContainerType => {\r\n    return {\r\n        newStatusText: state.profilePage.newStatusText\r\n    }\r\n}\r\n\r\nconst ProfileStatusContainer = connect(mapStateToProps, {updateStatus})(ProfileStatus)\r\n\r\nexport default ProfileStatusContainer;","import React from 'react';\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../Redux/reducers/profile-reducer\";\r\nimport ProfileStatusContainer from \"./ProfileStatus/ProfileStatusContainer\";\r\nimport unknownUser from \"../../../assets/images/user.png\"\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileInfo = ({profile}: ProfileInfoType) => {\r\n    if(!profile){\r\n        return <div>\r\n            <Preloader/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}>\r\n                 <div className={classes.imgProfileInfo}> {profile.photos.large ? <img src={profile.photos.large}/> : <img src={unknownUser}/>}</div>\r\n                <div>{profile.fullName}</div>\r\n                <ProfileStatusContainer/>\r\n                <h3>Description</h3>\r\n                <div>{profile.lookingForAJobDescription}</div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPost_postBlock__ZZVtG\",\"posts\":\"MyPost_posts__WajAW\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Ihm4C\"};","import React from 'react';\r\nimport classes from \".//Post.module.css\";\r\nimport {PostsDataType} from \"../../../../Redux/reducers/profile-reducer\";\r\n\r\nconst Post = React.memo((props:PostsDataType) => {\r\n    return (\r\n     <span>\r\n         <div className={classes.item}>\r\n             <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRbNslP7-_P7jz5MrT5yhW14y_IzBDbZZT0ag&usqp=CAU\" alt=\"no photo\"/>\r\n             {props.message}\r\n             <div><span>Like {props.likeCount}</span></div>\r\n         </div>\r\n\r\n     </span>\r\n    );\r\n});\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utilits/validation/validators\";\r\nimport FormsControl from \"../../../common/FormsControl/FormsControl\";\r\nexport type AddPostFormType = {\r\n    textarea: string\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst Textarea = FormsControl(\"textarea\")\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder=\"Enter your post\" name=\"newPostBody\" component={Textarea} validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n);\r\n};\r\n\r\nexport default AddPostForm;","import {reduxForm} from \"redux-form\";\r\nimport AddPostForm, {AddPostFormType} from \"./AddPostForm\";\r\n\r\nexport const AddPostReduxForm = reduxForm<AddPostFormType>({form:\"profileAddPostForm\"})(AddPostForm)","import React from 'react';\r\nimport classes from \".//MyPost.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostContainerPropsType} from \"./MyPostContainer\";\r\nimport {AddPostReduxForm} from \"./AddPostForm/AddPostReduxForm\";\r\n\r\nconst MyPosts = React.memo((props: MyPostContainerPropsType) => {\r\n    let postsElement = props.statePost.map((p) =>\r\n        <div key={p.id}>\r\n            <Post message={p.message}\r\n                  likeCount={p.likeCount}/>\r\n        </div>)\r\n\r\n    let addNewPostHandler = (values: any) => {\r\n        props.addPost(values.newPostBody)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <div>\r\n                <h2>My posts</h2>\r\n            </div>\r\n            <AddPostReduxForm onSubmit={addNewPostHandler}/>\r\n            <div className={classes.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport {addPost, PostsDataType} from \"../../../Redux/reducers/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../Redux/redux-store\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\ntype MapStateToPropsForMyPostContainerType = {\r\n    statePost: Array<PostsDataType>\r\n}\r\n\r\ntype MapDispatchToPropsForMyPostContainerType = {\r\n    addPost: (newPost: string) => void,\r\n}\r\n\r\nexport type MyPostContainerPropsType = MapStateToPropsForMyPostContainerType & MapDispatchToPropsForMyPostContainerType\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsForMyPostContainerType => {\r\n    return {\r\n        statePost: state.profilePage.postsData\r\n    }\r\n}\r\n\r\nconst MyPostContainer = connect(mapStateToProps, {addPost})(MyPosts)\r\n\r\nexport default MyPostContainer;","import React from 'react';\r\nimport classes from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostContainer from \"./MyPost/MyPostContainer\";\r\nimport {ProfileType} from \"../../Redux/reducers/profile-reducer\";\r\n\r\ntype ProfileLocalType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst Profile = ({profile}: ProfileLocalType) => {\r\n    return (\r\n        <div className={classes.profile}>\r\n            <ProfileInfo profile={profile}/>\r\n            <MyPostContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React, {ComponentType} from \"react\"\r\nimport Profile from \"./Profile\";\r\nimport {getProfile, getStatus, ProfileType} from \"../../Redux/reducers/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {RootStateType} from \"../../Redux/redux-store\";\r\n\r\ntype MapStateToPropsForProfileContainerType = {\r\n    profile: ProfileType\r\n    authUserID: number | null\r\n}\r\ntype MapDispatchToPropsForProfileContainer = {\r\n    getProfile: (userID: string) => void\r\n    getStatus: (userID: string) => void\r\n}\r\ntype ProfileContainerType = MapStateToPropsForProfileContainerType & MapDispatchToPropsForProfileContainer\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nexport type CommonProfileContainerPropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\r\n\r\nclass ProfileContainer extends React.Component<CommonProfileContainerPropsType> {\r\n\r\n    constructor(props: CommonProfileContainerPropsType) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let userID = this.props.match.params.userId\r\n        if (!userID) {\r\n            userID = String(this.props.authUserID)\r\n        }\r\n            this.props.getProfile(userID)\r\n            this.props.getStatus(userID)\r\n    }\r\n\r\n    render() {\r\n        return <Profile profile={this.props.profile}/>;\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsForProfileContainerType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        authUserID: state.auth.userID\r\n    }\r\n}\r\nexport default compose<ComponentType>(connect(mapStateToProps, {\r\n    getProfile,\r\n    getStatus\r\n}), withRouter, WithAuthRedirect)(ProfileContainer)","// extracted by mini-css-extract-plugin\nexport default {\"textarea\":\"FormsControl_textarea__uFRWD\",\"error\":\"FormsControl_error__RmnLp\",\"textError\":\"FormsControl_textError__kzYtc\"};","import React from 'react';\r\nimport style from './FormsControl.module.css'\r\n\r\nconst FormsControl = (Element: string) => ({input, meta: {touched, error}, ...props}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div>\r\n            <div className={style.textarea + \" \" + (hasError ? style.error : \"\")}>\r\n                <Element {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span className={style.textError}>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormsControl;","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../Redux/redux-store\";\r\n\r\ntype MapStateToPropsForDirect = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForDirect = (state: RootStateType): MapStateToPropsForDirect => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>){\r\n    const RedirectComponent = (props: MapStateToPropsForDirect) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/Login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToPropsForDirect)(RedirectComponent)\r\n}\r\n\r\n","\r\nexport const required = (value: string) => {\r\n    if(value) return undefined\r\n    else return \"Field is required\"\r\n}\r\nexport const maxLengthCreator = (maxLength:number) => (value:string) => {\r\n        if(value.length > maxLength) return `Max length more than ${maxLength} symbols`\r\n        else return undefined\r\n}"],"names":["props","useState","editMode","setEditMode","newStatusText","statusText","setStatusText","useEffect","type","value","onBlur","updateStatus","onChange","event","currentTarget","autoFocus","onDoubleClick","connect","state","profilePage","ProfileStatus","profile","className","classes","photos","large","src","unknownUser","fullName","lookingForAJobDescription","Preloader","React","alt","message","likeCount","maxLength10","maxLengthCreator","Textarea","FormsControl","onSubmit","handleSubmit","Field","placeholder","name","component","validate","required","AddPostReduxForm","reduxForm","form","AddPostForm","postsElement","statePost","map","p","id","values","addPost","newPostBody","postsData","MyPosts","ProfileContainer","userID","this","match","params","userId","String","authUserID","getProfile","getStatus","compose","auth","withRouter","WithAuthRedirect","Element","input","meta","touched","error","hasError","style","mapStateToPropsForDirect","isAuth","Component","restProps","to","maxLength","length"],"sourceRoot":""}