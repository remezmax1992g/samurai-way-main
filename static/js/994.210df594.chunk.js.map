{"version":3,"file":"static/js/994.210df594.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/AddMessageForm/AddMessageForm.tsx","Components/Dialogs/AddMessageForm/AddMessageReduxForm.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","webpack://samurai-way/./src/Components/common/FormsControl/FormsControl.module.css?c49d","Components/common/FormsControl/FormsControl.tsx","Components/hoc/WithAuthRedirect.tsx","utilits/validation/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__OeMdl\",\"dialogsItem\":\"Dialogs_dialogsItem__quIhc\",\"dialog\":\"Dialogs_dialog__vq7oY\",\"messages\":\"Dialogs_messages__enNFM\",\"message\":\"Dialogs_message__zQO8w\"};","import React from 'react';\r\nimport classes from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props: any) => {\r\n    let path = \"/Dialogs/\" + props.id;\r\n    return (\r\n        <div className={classes.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from \"./../Dialogs.module.css\"\r\n\r\n\r\n\r\nconst Message = (props: any) => {\r\n\r\n    return (\r\n        <div className={classes.message}>\r\n            <div>{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utilits/validation/validators\";\r\nimport FormsControl from \"../../common/FormsControl/FormsControl\";\r\nexport type AddMessageFormType = {\r\n    textarea: string\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst Textarea = FormsControl(\"textarea\")\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder=\"Enter your message\"\r\n                       name=\"newMessageBody\"\r\n                       component={Textarea}\r\n                validate={[required, maxLength50]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddMessageForm;","import {reduxForm} from \"redux-form\";\r\nimport AddMessageForm, {AddMessageFormType} from \"./AddMessageForm\";\r\n\r\nexport const AddMessageReduxForm = reduxForm<AddMessageFormType>({form:\"dialogAddMessageForm\"})(AddMessageForm)","import React from 'react';\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../Redux/reducers/dialogs-reducer\";\r\nimport {AddMessageReduxForm} from \"./AddMessageForm/AddMessageReduxForm\";\r\n\r\ntype DialogLocalType = {\r\n    stateDialog: DialogsPageType\r\n    sendNewMessage: (newMessage: string) => void,\r\n}\r\n\r\nconst Dialogs = ({stateDialog, sendNewMessage}: DialogLocalType) => {\r\n    //value\r\n    let dialogElements = stateDialog.dialogData.map((d) => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messageElements = stateDialog.messagesData.map((m) => <Message key={m.id} message={m.message}/>)\r\n    const addNewMessage = (values:any) => {\r\n        sendNewMessage(values.newMessageBody)\r\n    }\r\n    //JSX\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItem}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messageElements}</div>\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;","import React, {ComponentType} from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {\r\n    DialogsPageType,\r\n    sendNewMessage,\r\n} from \"../../Redux/reducers/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {WithAuthRedirect} from \"../hoc/WithAuthRedirect\";\r\nimport {RootStateType} from \"../../Redux/redux-store\";\r\n\r\ntype MapStateToPropsForDialogsContainerType = {\r\n    stateDialog:DialogsPageType\r\n}\r\n\r\ntype MapDispatchToPropsForDialogsContainerType = {\r\n    sendNewMessage: (newMessage: string) => void,\r\n}\r\n\r\nexport type DialogsContainerPropsType = MapStateToPropsForDialogsContainerType & MapDispatchToPropsForDialogsContainerType\r\nclass DialogsContainer extends React.Component<DialogsContainerPropsType> {\r\n    constructor(props: DialogsContainerPropsType) {\r\n        super(props);\r\n    }\r\n    render(){\r\n        return <Dialogs stateDialog={this.props.stateDialog}\r\n                        sendNewMessage={this.props.sendNewMessage}\r\n                       />\r\n    }\r\n}\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsForDialogsContainerType => {\r\n    return {\r\n        stateDialog: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {sendNewMessage}),\r\n    WithAuthRedirect)\r\n(DialogsContainer);","// extracted by mini-css-extract-plugin\nexport default {\"textarea\":\"FormsControl_textarea__uFRWD\",\"error\":\"FormsControl_error__RmnLp\",\"textError\":\"FormsControl_textError__kzYtc\"};","import React from 'react';\r\nimport style from './FormsControl.module.css'\r\n\r\nconst FormsControl = (Element: string) => ({input, meta: {touched, error}, ...props}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div>\r\n            <div className={style.textarea + \" \" + (hasError ? style.error : \"\")}>\r\n                <Element {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span className={style.textError}>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormsControl;","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../Redux/redux-store\";\r\n\r\ntype MapStateToPropsForDirect = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForDirect = (state: RootStateType): MapStateToPropsForDirect => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>){\r\n    const RedirectComponent = (props: MapStateToPropsForDirect) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/Login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToPropsForDirect)(RedirectComponent)\r\n}\r\n\r\n","\r\nexport const required = (value: string) => {\r\n    if(value) return undefined\r\n    else return \"Field is required\"\r\n}\r\nexport const maxLengthCreator = (maxLength:number) => (value:string) => {\r\n        if(value.length > maxLength) return `Max length more than ${maxLength} symbols`\r\n        else return undefined\r\n}"],"names":["props","path","id","className","classes","to","name","message","maxLength50","maxLengthCreator","Textarea","FormsControl","onSubmit","handleSubmit","Field","placeholder","component","validate","required","AddMessageReduxForm","reduxForm","form","AddMessageForm","stateDialog","sendNewMessage","dialogElements","dialogData","map","d","messageElements","messagesData","m","values","newMessageBody","DialogsContainer","this","React","compose","connect","state","dialogsPage","WithAuthRedirect","Element","input","meta","touched","error","hasError","style","mapStateToPropsForDirect","isAuth","auth","Component","restProps","value","maxLength","length"],"sourceRoot":""}